const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const fetchUser = require('../middleWare/fetchuser')
const { body, validationResult } = require('express-validator');
const router = express.Router();

const JWT_SECRET = 'KunalBhika1#';

// 1. EndPoint to create a user (api/auth/createUser)

// Validation rules according to which the request will be checked.
const validationRulesCreateUser = [body('name', `Name can't be empty`).notEmpty().escape(),
body('email', 'Enter a valid email').isEmail(),
body('password', 'Password must be atleast 5 characters').isLength({ min: 5 })];

router.post('/createUser', validationRulesCreateUser, async (req, res) => {
    // Validate inputs
    const errors = validationResult(req);

    // validating the request check if user already exist or not
    let isExisting = await User.findOne({ email: req.body.email });

    // if user already exist
    if (isExisting)
        return res.status(400).json({ error: "Email already registered!" });

    // if everything correct create a new user with data received by request and save in DB.
    if (errors.isEmpty()) {
        console.log(req.body);

        // Generating a password hash using bcryptjs
        const salt = await bcrypt.genSalt(10);
        const secPassword = await bcrypt.hash(req.body.password, salt);
        req.body.password = secPassword;

        // generating a authorization token for the new User using the unique id generated by mongoDB
        const newUser = User(req.body);

        const data = {
            userId: {
                id: newUser.id
            }
        }

        const authToken = jwt.sign(data, JWT_SECRET);

        return newUser.save()
            .then(newUser => res.send({ authToken })).catch(err => res.status(500).json({ error: "some error occured while registering the user!" }));
    }
    // else send validataion error
    res.send({ errors: errors.array() });
})

// 2. EndPoint to authenticate a user (api/auth/login)
const validationRulesLogin = [
    body('email', 'Enter a valid email').isEmail(),
    body('password', 'Password cannot be blank').exists()
]

router.post('/login', validationRulesLogin, async (req, res) => {
    const validationErrors = validationResult(req);

    const { email, password } = req.body;
    let user = await User.findOne({ email });

    if (!user)
        return res.status(400).json({ error: "Please try to login with correct credentials" });

    const passwordComapre = await bcrypt.compare(password, user.password);

    if (!passwordComapre)
        return res.status(400).json({ error: "Please try to login with correct credentials" });

    const data = {
        userId: {
            id: user.id
        }
    }

    const authToken = jwt.sign(data, JWT_SECRET);

    return res.send({ authToken });
})

// 3. GetUser details using authToken . Login Required
router.get('/getUser', fetchUser, async (req, res) => {
    try {
        let user = await req.userId.id;
        let userData = await User.findById(user).select('-password');
        return res.send(userData);
    } catch (error) {
        return res.status.send(500).json('internal server error');
    }
})

module.exports = router;